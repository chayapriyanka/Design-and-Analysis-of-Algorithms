int distance(int arr1[],int arr2[])
{
    return abs(arr1[0]-arr2[0])+abs(arr1[1]-arr2[1]);
}
int minCostConnectPoints(int** points, int pointsSize, int * pointsColSize)
{
    
int minKey(int key[], bool mstSet[])
{
	// Initialize min value
	int min = INT_MAX, min_index;
	for (int v = 0; v < pointsSize; v++)
		if (mstSet[v] == false && key[v] < min)
			min = key[v], min_index = v;

	return min_index;
}
int printMST(int parent[], int graph[pointsSize][pointsSize])
{
    int a=0;
	for (int i = 1; i < pointsSize; i++)
    {
        a=a+graph[i][parent[i]];
    }
    return a;
}
int primMST(int graph[pointsSize][pointsSize])
{
	// Array to store constructed MST
	int parent[pointsSize];
	// Key values used to pick minimum weight edge in cut
	int key[pointsSize];
	// To represent set of vertices included in MST
	bool mstSet[pointsSize];

	// Initialize all keys as INFINITE
	for (int i = 0; i < pointsSize; i++)
		key[i] = INT_MAX, mstSet[i] = false;

	// Always include first 1st vertex in MST.
	// Make key 0 so that this vertex is picked as first
	// vertex.
	key[0] = 0;
	parent[0] = -1; // First node is always root of MST

	// The MST will have V vertices
	for (int count = 0; count < pointsSize - 1; count++) {
		// Pick the minimum key vertex from the
		// set of vertices not yet included in MST
		int u = minKey(key, mstSet);

		// Add the picked vertex to the MST Set
		mstSet[u] = true;

		// Update key value and parent index of
		// the adjacent vertices of the picked vertex.
		// Consider only those vertices which are not
		// yet included in MST
		for (int v = 0; v < pointsSize; v++)

			// graph[u][v] is non zero only for adjacent
			// vertices of m mstSet[v] is false for vertices
			// not yet included in MST Update the key only
			// if graph[u][v] is smaller than key[v]
			if (graph[u][v] && mstSet[v] == false
				&& graph[u][v] < key[v])
				parent[v] = u, key[v] = graph[u][v];
	}

	// print the constructed MST
    int cost=printMST(parent, graph);
    return cost;
}
    int distmatrix[pointsSize][pointsSize];
    for(int i=0;i<pointsSize;i++)
    {
        for(int j=0;j<pointsSize;j++)
        {
            distmatrix[i][j]=distance(points[i],points[j]);
        }
    }
    int finalcost=primMST(distmatrix);
    return finalcost;
    
}
